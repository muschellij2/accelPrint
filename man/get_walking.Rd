% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_walking.R
\name{get_walking}
\alias{get_walking}
\title{Generate Grid Cell Predictors from Accelerometry Data}
\usage{
get_walking(
  data,
  sample_rate = NULL,
  template_list = NULL,
  parallel = FALSE,
  cores = NULL,
  sim_min = 0.6,
  dur_min = 0.8,
  dur_max = 1.4,
  ptp_r_min = 0.5,
  ptp_r_max = 2,
  vmc_r_min = 0.05,
  vmc_r_max = 0.5,
  mean_abs_diff_med_p_max = 0.7,
  mean_abs_diff_med_t_max = 0.2,
  mean_abs_diff_dur_max = 0.3
)
}
\arguments{
\item{data}{A data frame with accelerometry values (e.g., x, y, z, and time)}

\item{sample_rate}{optional specification of sample rate (samples per sec), if not specified will be inferred}

\item{template_list}{optional list of template with which to perform walking segmentation, if not specified will be all left wrist templates from adeptdata package}

\item{parallel}{logical. If TRUE, will run in parallel using all available cores}

\item{cores}{number of cores to use for parallel processing. If NULL and parallel is TRUE will use all available cores}

\item{sim_min}{ADEPT parameter sim_MIN, default 0.6}

\item{dur_min}{ADEPT parameter dur_MIN, default 0.8}

\item{dur_max}{ADEPT parameter dur_MAX, default 1.4}

\item{ptp_r_min}{ADEPT parameter ptp_r_MIN, default 0.5}

\item{ptp_r_max}{ADEPT parameter ptp_r_MAX, default 2}

\item{vmc_r_min}{ADEPT parameter vmc_r_MIN, default 0.05}

\item{vmc_r_max}{ADEPT parameter vmc_r_MAX, default 0.5}

\item{mean_abs_diff_med_p_max}{ADEPT parameter mean_abs_diff_med_p_MAX, default 0.7}

\item{mean_abs_diff_med_t_max}{ADEPT parameter mean_abs_diff_med_t_MAX, default 0.2}

\item{mean_abs_diff_dur_max}{ADEPT parameter mean_abs_diff_dur_MAX, default 0.3}
}
\value{
A data frame of sub-second data from walking bouts only
}
\description{
This function processes raw accelerometry data and creates predictors
using a grid-based approach with optional lagging.
}
\examples{
# Load example data
data(raw_accel)

# Run the function
res <- get_walking(raw_accel, parallel = TRUE, cores = 2L)
head(res)
}
